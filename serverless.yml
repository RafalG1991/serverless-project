# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: kurserverless
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: sls-start-project
# "service" is the name of this project. This will also be added to your AWS resource names.
service: ticket-system

stages:
  default:
    params:
      tableName: "tickets-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [TicketsTable, Arn]
        - Effect: Allow
          Action:
            - "cognito-idp:AdminInitiateAuth"
            - "cognito-idp:AdminCreateUser"
            - "cognito-idp:AdminSetUserPassword"
          Resource:
            - Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
            
  environment:
    USERS_TABLE: ${param:tableName}
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
    REGION: ${self:provider.region}

  httpApi:
    authorizers:
      ticketSystemAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
        audience:
          - { Ref: UserClient }
          
functions:
  auth:
    handler: auth.handler
    events:
      - httpApi:
          path: /auth/{proxy+}
          method: POST
  tickets:
    handler: tickets.handler
    events:
      - httpApi: 
          path: /ticket/{proxy+}
          method: ANY
          authorizer:
            name: ticketSystemAuthorizer

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-auth-pool-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    TicketsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ticketId
            AttributeType: S
        KeySchema:
          - AttributeName: ticketId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}
